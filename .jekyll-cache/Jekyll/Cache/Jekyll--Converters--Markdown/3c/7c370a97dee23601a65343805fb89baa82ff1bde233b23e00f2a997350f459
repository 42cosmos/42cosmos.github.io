I"l1<h3 id="1-pythonic-code">1) Pythonic Code</h3>

<ul>
  <li>파이썬 스타일의 코딩 기법</li>
  <li>파이썬 특유 문법을 활용해 효율적 코드 표현</li>
  <li>고급 코드를 작성할 수록 더 많이 요구됨</li>
</ul>

<h4 id="split--join">Split &amp; Join</h4>

<h4 id="split">Split</h4>

<p>: String Type 의 값을 나누어 List 형태로 반환
<code class="highlighter-rouge">.split() </code> 괄호 안 기준으로 문자열을 나눔</p>

<h4 id="join">Join</h4>

<p>: String List 를 합쳐 하나의 String으로 반환할 때 사용
<code class="highlighter-rouge">''.join(var)</code></p>

<p><br /></p>

<h3 id="list-comprehension">List Comprehension</h3>

<ul>
  <li>기존 List를 사용해 간단히 다른 List를 만드는 기법</li>
  <li>포함되는, 포괄적인 List 라는 의미로 사용</li>
  <li>파이썬에서 가장 많이 사용되는 기법 중 하나</li>
  <li>for + append 보다 빠른 속도</li>
</ul>

<p><strong>One Dimentional</strong></p>

<p><code class="highlighter-rouge">[i+j for i in case_1 for j in case_2]</code></p>

<p><strong>Two Dimentional</strong></p>

<p><code class="highlighter-rouge">[[i+j for i in case_1] for j in case_2]</code></p>

<p><br /></p>

<h3 id="enumerate--zip">Enumerate &amp; Zip</h3>

<h4 id="enumerate">Enumerate</h4>

<p>: List element 추출 시 번호를 붙여 반환
<code class="highlighter-rouge">enumerate(var)</code></p>

<h4 id="zip">Zip</h4>

<p>: 두 개의 list 값을 병렬 추출</p>

<p><code class="highlighter-rouge">for i, (a, b) in enumerate(zip(list_a, list_b))</code></p>

<p><br /></p>

<h3 id="lambda--mapreduce">Lambda &amp; MapReduce</h3>

<h4 id="lambda">Lambda</h4>

<p>: 함수 이름 없이 함수처럼 사용할 수 있는 익명함수, python3 부터 권장하지는 않으나 여전히 많이 쓰임
<code class="highlighter-rouge">f = lambda x, y: x + y</code></p>

<h4 id="map-function">Map Function</h4>

<p>: Sequence 자료형 각 element에 동일한 function을 적용</p>

<ul>
  <li>if filter 사용 가능</li>
  <li>두 개 이상의 list 에도 적용 가능</li>
  <li>python3 부터 iteration 생성 시 list를 붙여주어야 list 사용 가능</li>
  <li>실행시점의 값을 생성, 메모리 효율적</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ex</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="n">f</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">**</span> <span class="mi">2</span> <span class="k">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">ex</span><span class="p">)))</span>
<span class="k">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">ex</span><span class="p">)))</span>
</code></pre></div></div>

<h3 id="reduce-function">Reduce Function</h3>

<p>: map과 달리 list에 똑같은 함수를 적용해서 통합</p>

<p><code class="highlighter-rouge">from functools import reduce</code></p>

<p><br /></p>

<h2 id="asterisk-">Asterisk *</h2>

<p>: 단순 곱셈, 제곱 연산, 가변 인자 활용 등 다양하게 사용됨</p>

<p><strong>unpacking a container</strong></p>

<ul>
  <li>tuple, dict 등 자료형 내부 값을 unpacking</li>
  <li>합수 입력값, zip 등을 유용하게 사용 가능</li>
</ul>

<p><br /></p>

<h2 id="collections">Collections</h2>

<p>: List, Tuple, Dict에 대한 Python Built-in 확장 자료 구조(모듈)</p>

<h3 id="deque">deque</h3>

<ul>
  <li>Stack과 Queue를 지원하는 모듈</li>
  <li>List에 비해 효율적인 자료 저장 방식</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">deque</span>
<span class="c1">#1
</span><span class="n">deque_list</span> <span class="o">=</span> <span class="n">deque</span><span class="p">()</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
    <span class="n">deque_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
<span class="c1">#2
</span><span class="n">deque_list</span><span class="o">.</span><span class="n">appendleft</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>rotate, reverse 등 Linked List의 특정을 지원</li>
  <li>기존 list 형태 함수 모두 지원</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">deque_list</span><span class="o">.</span><span class="n">rotate</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="n">deque_list</span><span class="o">.</span><span class="n">extend</span><span class="p">([</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">deque</span><span class="p">(</span><span class="nb">reversed</span><span class="p">(</span><span class="n">deque_list</span><span class="p">)))</span>
</code></pre></div></div>

<ul>
  <li>기존 list보다 효율적인 자료구조 제공</li>
  <li>효율적 메모리 구조로 처리 속도 향상</li>
</ul>

<p><br /></p>

<h3 id="ordered-dict">Ordered Dict</h3>

<ul>
  <li>데이터를 입력한 순서대로 dict를 반환</li>
  <li>dict type의 값을, value 또는 key 값으로 정렬할 때 사용 가능</li>
</ul>

<p><code class="highlighter-rouge">for k, v in OrderedDict(sorted(d.items(), key=lambda t: t[0])).items():</code></p>

<p><br /></p>

<h3 id="default-dict">default Dict</h3>

<ul>
  <li>dict type의 값에 기본 값을 지정해 신규값 생성 시 사용하는 방법</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
<span class="n">d</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">object</span><span class="p">)</span> <span class="c1"># Default Dict 생성
</span><span class="n">d</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span> <span class="c1"># default값 == 0
</span></code></pre></div></div>

<ul>
  <li>
    <p>하나의 지문에 각 단어가 몇 개나 있는지 세고 싶을 경우 ?</p>
  </li>
  <li>
    <p>Text-mining 접근법 - Vector Space Model</p>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">OrderedDict</span>
<span class="n">word_count</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">object</span><span class="p">)</span> <span class="c1"># Default dictionary를 생성
</span><span class="n">word_count</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span> <span class="c1"># Default 값을 0으로 설정
</span>
<span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">text</span><span class="p">:</span>
  <span class="n">word_count</span><span class="p">[</span><span class="n">word</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">OrderedDict</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">word_count</span><span class="o">.</span><span class="n">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">t</span><span class="p">:</span> <span class="n">t</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">))</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="counter">Counter</h3>

<p>: Sequence Type의 data element 의 갯수를 dict 형태로 반환</p>

<ul>
  <li>Dict type, keyword parameter 등도 모두 처리 가능</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">Counter</span>
<span class="n">c</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">()</span>
<span class="n">c</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">(</span><span class="s">'gallahad'</span><span class="p">)</span> <span class="c1"># 각 알파벳이 몇 번 들어가있는지 확인
</span><span class="n">c</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">({</span><span class="s">'red'</span> <span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="s">'blue'</span><span class="p">:</span><span class="mi">2</span><span class="p">})</span>
<span class="n">c</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">(</span><span class="n">reds</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">blue</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>set 연산 지원</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">c</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">(</span><span class="n">a</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="n">d</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">(</span><span class="n">a</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="n">c</span><span class="o">.</span><span class="n">subtract</span><span class="p">(</span><span class="n">d</span><span class="p">)</span> <span class="c1"># c - d
</span><span class="k">print</span><span class="p">(</span><span class="n">c</span> <span class="o">+</span> <span class="n">d</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">c</span> <span class="o">&amp;</span> <span class="n">d</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">c</span> <span class="o">|</span> <span class="n">d</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>word counter 기능 제공</li>
</ul>

<p><br /></p>

<h3 id="named-tuple">named tuple</h3>

<ul>
  <li>tuple 형태로 data 구조체를 저장하는 방법</li>
  <li>저장되는 data variable을 사전에 지정해서 저장</li>
</ul>
:ET