I"y$<p><strong>Caesar Cryptography</strong> : 순서를 조절</p>

<p>&gt; Replace a letter into the next of the next - We can express the Caesar encryption algorithm into an equation</p>

<ol>
  <li>Easy to break 2. Only 25 keys 3. Vulnerable to brute force attack encryption 
E(k(밀어낼 자릿수-형문), p-키) … x,y,z 는 보통 나눈 후 나머지를 차용 e.g. 3을 더한다음에 26으로 나눈 나머지… 
복호화 D(키, 사이퍼텍스트) 
쓸 수 있는 키의 경우의 수가 25개 &gt; 쉽게 깨짐</li>
</ol>

<p><strong>Single letter substitution</strong> ( 전형적인 암호문 )</p>

<ul>
  <li>Replace a letter to another</li>
  <li>26! keys are possible .. &gt; Calculate the frequency of a letter</li>
</ul>

<p>각 글자가 나온 빈도수를 계산 &gt; E, T가 가장 많이 사용됨 &gt; P, Z가 높은 확률로 e, t</p>

<p>많이 나오는 패턴을 분석해 단어를 조합 (the … ) 키가 무조건 많다고 해서 안전한 것은 아님.</p>

<p><strong>Playfair</strong></p>

<p>- Multiple-letter encryption ( Create 5x5 matrix based on a given keyword )</p>

<p><img src="https://k.kakaocdn.net/dn/cG0LJu/btqAOb1ygQz/lPAGV2RxtMFdpfIJiPx0Z1/img.png" alt="img" /></p>

<p><strong>Vernam</strong> ( 지금도 쓰이는 방식 )</p>

<p>- Use key streams</p>

<p>xor - 0111  &gt; A O+ B O+ B = A … xor이 두 번 되면 제자리로 돌아옴</p>

<p>​    1010</p>

<p>————</p>

<p>​     1101</p>

<p>아이번째 키 O+ 아이번째 플레인 텍스트 = 암호화</p>

<p>E (k, p) = ki O+ pi각각에 대해 xor</p>

<p><img src="https://k.kakaocdn.net/dn/dIo22d/btqAQ4mJoDr/3EWPPewkSivpcG8PJcJUvk/img.png" alt="img" /></p>

<p><strong>One time pad</strong></p>

<ul>
  <li>
    <p>Use a key stream that is perfectly random without any repetition</p>
  </li>
  <li>
    <p>One Time Pad provides prefect security</p>
  </li>
  <li>
    <p>Impractical</p>
  </li>
  <li>
    <ul>
      <li>The size of a key stream should be the same as that of its message</li>
    </ul>
  </li>
</ul>

<p>원타임패드~ &gt; 버남 + 부가 조건 &gt; 키 스트림 = 플레인 텍스트</p>

<p>원타임 패드의 조건 = 일회용… + 완벽한 랜덤 … 퍼펙트 시큐리티라는게 도달하기 힘든 뉴스 &gt; 활용성 저하</p>

<p><strong>Rail fence</strong></p>

<p>Transposition</p>

<p><strong>Rotor Machine</strong> : 현대 컴퓨터로 넘어가기 전에 쓰인 가장 대표적이고 독특한 암호</p>

<p>- The Enigma machine : Consists of multiple (3) cylinders &gt; 26^3 = 17,576 substitutions</p>

<p><strong>Symmetric Cryptography</strong></p>

<p>plaintext - original message</p>

<p>ciphertext - coded message 
cipher - algorithm for transforming plaintext to ciphertext 알고리즘 자체
key - info used in cipher known only to sender/receiver 암복호화 할 때
encipher (encrypt) - converting plaintext to ciphertext 플 &gt; 암
decipher (decrypt) - recovering ciphertext from plaintext 
cryptography - study of encryption principles/methods 암호학
cryptanalysis (codebreaking) - study of principles/ methods of deciphering ciphertext without knowing key</p>

<p>cryptology - field of both cryptography and cryptanalysis</p>

<p><strong>Symmetric Cipher Model</strong></p>

<p>대칭 : 가운데를 기준으로 잘라 봤을 때 키가 똑같음.</p>

<p>대칭 : 키 두개가 대칭이다 &gt; 암호화 할 때랑, 복화하할 때랑</p>

<p>K의 키가 같으면 대칭키라고 함. 원래 당연시 여겨졌는데, 이게 꼭 두개가 같을 필요가 없다는 말이 생기고는 다양한 기술이 나옴</p>

<p><img src="https://k.kakaocdn.net/dn/GHl5G/btqARh66P5y/7DLWjkwN7aYjxIqznO0a21/img.png" alt="img" /></p>

<p><strong>Requirements</strong></p>

<ul>
  <li>two requirements for secure use of symmetric encryption:</li>
  <li>a strong encryption algorithm</li>
  <li>a secret key known only to sender / receiver mathematically have:</li>
</ul>

<p>Y = E(K, X)</p>

<p>X = D(K, Y)
- assume encryption algorithm is known implies a secure channel to distribute key</p>

<p><strong>Cryptography</strong></p>

<p>Number of keys 1. Single Key 2. Two Key ( Private and Public )</p>

<p>싱글키 : 우리가 알고있는 대칭키암호, 암호화 복호화가 같아서 하나만 쓰이는 것.</p>

<p>더블키 : 퍼블릭 크립토지만, 암복호화 키가 다름. 이걸로만 암호화하면 이걸로만 복호화할 수 있고…</p>

<p>요즘 디지털서명, 공인인증서에 사용됨</p>

<p>Plain text processing 1. Block 2. Stream</p>

<p>블럭 : 하나의 묶음 일종의 양동이. 대부분이 블럭 암호화. 용도 : 고정된 데이터 ( 하드디스크, 영화파일, 이메일 _) - 실시간성에서는 안 좋음. 딜레이 발생</p>

<p>스트림 : 흘러가는 것. 단순하지만 블럭 암호가 발전되어 있고 대중화되어 있음. ( 넷플릭스, 실시간 주고받는 경우 실시간으로 데이터가 생길 때마다 암호화 해야 함. )</p>

<p><strong>Cryptanalysis</strong></p>

<p>- objective to recover key not just message</p>

<p>- general approaches: 1. cryptanalytic attack 2. brute-force attack</p>

<p><strong>How secure?</strong></p>

<p>Perfectly secure - Unconditionally secure</p>

<p>Computationally secure - 비용자체가 (시간 돈 등) 정보 자체의 가치보다 암호문깨는 비용이 더 듦</p>

<ul>
  <li>The cost of breaking the cipher exceeds the value of information</li>
  <li>The time required to break the cipher exceeds the lifetime of information</li>
</ul>

<p><strong>Brute Force Search ( Or brute force attack )</strong></p>

<ul>
  <li>always possible to simply try every key</li>
  <li>most basic attack, proportional to key size ( 상대적인 경우 )</li>
  <li>assume either know / recognise plaintext</li>
</ul>

<p><img src="https://k.kakaocdn.net/dn/ErMRa/btqARx2VV2y/HviVvEEm8PYS7qqmpelnI1/img.png" alt="img" /></p>

<p><strong>Feistel Cipher Structure</strong></p>

<p>&gt; based on concept of invertible product cipher</p>

<ul>
  <li>partitions input block into two halves</li>
  <li>process through multiple rounds which perform a substitution on left data half
based on round function of right half &amp; 
subkey then have permutation swapping halves</li>
</ul>

<p>block size: 128 bits</p>

<p>key size: 128 bits</p>

<p>number of rounds: 16 subkey generation algorithm</p>

<p>Round function fast software en/decryption</p>

<p>장점 : 암호문 생성 이후 복호화 할 때 거꾸로 하면 됨.</p>

<p>&gt; 구조는 똑같이 사용하면서 키만 거꾸로 넣으면 됨.</p>

<p>F(k, R)만 복잡하게 만들면 됨. 서브키를 16개 만듦 
F박스 함수를 지저분하게 만들면 됨</p>

<p><strong>Symmetric Block Cipher Algorithms</strong> - 이름 / 특성 / 나오게 된 이유</p>

<ol>
  <li>DES (Data Encryption Standard) - 미국 니스트 (표준평가원 등) 
adopted in 1977 by NBS (now NIST) as FIPS PUB 46
encrypts 64-bit data using 56-bit key
대부분의 암호들이 블럭을 64로 하면 키도 64로 하는데 des 는 56을 사용함
has widespread use / considerable controversy over its security 
1) Feistel cipher structure 
2) 56-bit key
3) Block cipher
4) 16 rounds 
5) S-Box for non-linearity 
&gt; 완전하게 만드는 방법 &gt; 키 사이즈 늘리기 … 트리플 des 나옴</li>
</ol>

<p><img src="https://k.kakaocdn.net/dn/GmdoM/btqASzlGczv/iADvaYRuT7esLrLsFFO5n1/img.png" alt="img" /></p>

<ol>
  <li>
    <p>3DES (Triple DES) 
&gt; 트리플은 중간에 암호화 복호화를 한 번 거침
공학적 해결 방법 : 암호화를 세 번 하는데 중간에 복호화를 함. 일반적으로 암호기법을 칩에다 만들어 침으로 가는 경우가 많음. 그래서 회로로 넣어놓음. 가끔가다가 des를 쓰고싶을 때 키 값을 같은 걸로 줌 &gt; 트리플 디를 쓴 것 처럼 세 번 커짐. 회로를 두 개를 만드느니.. 하나만 만들어서 비용절감을 이룸</p>
  </li>
  <li>
    <p>AES (Advanced Encryption Standard) - 가장 많이 쓰임 
has 128/192/256 bit keys, 128 bit data 
&gt; an iterative rather than feistel cipher : processes data as block of 4 columns of 4 bytes 
operates on entire data block in every round 
키 사이즈가 여러가지 &gt; 라운드를 16번 돌면 128, 16+8이면 192… 사용자가 원하는 만큼 … 
모든 데이터가 256비트가 필요한 건 아니기 때문에. 무조건 안전하게 만드는 게 아니라 계산적 안정을 줌</p>

    <p>Designed to be …
-1 resistant against known attack
-2 speed and code compactness on many CPUs
-3 design simplicity
initial XOR key material &amp; incomplete last round with fast XOR &amp; table lookup implementation</p>
  </li>
</ol>

<p>구조는 똑같고 돌 때마다 새로운 키가 있어서 변화를 많이 시킴. 페이스탈처럼 단순하지는 않지만 여러번 돌리는 구조는 같음. 라운드를 많이 돌리고 그 때마다 새로운 키를 넣고… 많이 시도하면서 계속 어그러트려서 암호를 만듦. 많이 어그러트리려면 키 사이즈가 늘어나야하고…브루텔 기법을 더이상 사용할 수 없음.</p>

<p>암호화를 해야한다고 하면 거의 256으로 함. CPU에 보통 이제 박혀있음 너무 많이 쓰기 때문에</p>
:ET