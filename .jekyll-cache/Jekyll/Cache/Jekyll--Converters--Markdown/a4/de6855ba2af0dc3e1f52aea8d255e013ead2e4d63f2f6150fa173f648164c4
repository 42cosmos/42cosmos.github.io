I"<h3 id="numpy">Numpy</h3>

<p>파이썬 과학 처리 패키지 - Numerical Python</p>

<ul>
  <li><strong>반복문 없이 데이터 배열 처리 지원</strong></li>
  <li>C, C++, 포트란</li>
  <li>Dymanic typing 불허</li>
</ul>

<h3 id="array-creation">Array creation</h3>

<h3 id="ndarray">ndarray</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">type</span><span class="p">(</span><span class="n">test_array</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="n">numpy</span><span class="o">.</span><span class="n">float64</span> <span class="c1"># 64는 크기
</span></code></pre></div></div>

<p>파이썬 : 메모리 주소의 위치를 잡음. 리스트 안에 값이 아닌 메모리 주소 &gt; 복사 == 메모리주소 복사</p>

<blockquote>
  <p><code class="highlighter-rouge">from copy import deepcopy</code> 로 해결</p>
</blockquote>

<p>넘파이 : 차례데로 데이터를 쌓음 &gt; 빠른 데이터 처리가 가능</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">t</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">],</span> <span class="nb">float</span><span class="p">)</span>
<span class="n">t</span><span class="o">.</span><span class="n">shape</span>
<span class="c1"># Expected Result - Vector
</span><span class="p">(</span><span class="mi">4</span><span class="p">,)</span> <span class="c1"># 4 column
</span>
<span class="n">t2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]],</span> <span class="nb">float</span><span class="p">)</span>
<span class="n">t2</span><span class="o">.</span><span class="n">shape</span>
<span class="c1"># Expected Result - Matrix
</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span> <span class="c1"># 1 by 4 1 row 4 columns
</span></code></pre></div></div>

<ul>
  <li>shape : numpy array의 object의 dimension 구성을 반환함 &gt; 튜플타입 반환
메트릭스 크기를 따라감</li>
  <li>ndim - # of dimension</li>
  <li>size - data의 개수 : <em>scala 값이기 때문에 int로 반환</em></li>
  <li>dtype : numpy array의 데이터 type을 반환함
대부분 float32, 64 로 선언 - 메모리에 크기가 결정되기 때문에 신경써야 함</li>
</ul>

<p><br /></p>

<h3 id="handling-shape">Handling Shape</h3>

<p>: Array Shape 의 크리 변경</p>

<h4 id="reshape">Reshape</h4>

<p>Matrix를 Vector로 펴야할 때</p>

<p>* 데이터 사이즈 개수만 맞추면 됨</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">test_matrix</span><span class="p">)</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
<span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">test_matrix</span><span class="p">)</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="c1"># -1 : size를 기반으로 row 개수 선정 | row 의 개수는 정확하게 모르지만 컬럼을 2개로 할 때
</span>
<span class="n">test</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">t</span><span class="p">)</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">8</span><span class="p">,)</span>
<span class="c1"># array([1,2,3,4,1,2,5,8])
</span><span class="n">test</span><span class="o">.</span><span class="n">reshape</span><span class="p">([</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">])</span>
<span class="c1"># array([[1],[2], ..., [8]])
</span></code></pre></div></div>

<p>데이터 호출 시 y값을 가져올 때, 이 값이 보통 Vector형태로 뽑히는데, Sklearn에서는 Matrix 형태로 들어가야 하기 때문에</p>

<h4 id="flatten">flatten</h4>

<p>: 다차원 array를 1차원으로 변환</p>

<p>딥러닝 초기모델 배울 때 nlist데이터셋을 쓰는데 ( 문자를 벡터형태를 사용 ), 28 by 28을 펴야할 때…</p>

<p><br /></p>

<h3 id="indexing--slicing">Indexing &amp; slicing</h3>

<h4 id="indexing">indexing</h4>

<p>a[0,0] == a[0][0]</p>

<h4 id="slicing">slicing</h4>

<table>
  <tbody>
    <tr>
      <td>x:y:z</td>
      <td>x : 시작, y : 끝 지점 바로 앞, z : step</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>데이터 일부분만 가져올 때 사용</p>
  </li>
  <li>
    <p>List와 달리 <strong>행과 열</strong> 부분을 나눠서 slicing이 가능함 / [행, 열]</p>
  </li>
  <li>
    <p>Matrix의 부분 집합을 추출할 때 유용함</p>
  </li>
</ul>

<h4 id="creation-function">Creation Function</h4>

<p>24:46</p>
:ET